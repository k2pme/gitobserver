[
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Observer",
        "importPath": "watchdog.observers",
        "description": "watchdog.observers",
        "isExtraImport": true,
        "detail": "watchdog.observers",
        "documentation": {}
    },
    {
        "label": "Observer",
        "importPath": "watchdog.observers",
        "description": "watchdog.observers",
        "isExtraImport": true,
        "detail": "watchdog.observers",
        "documentation": {}
    },
    {
        "label": "Observer",
        "importPath": "watchdog.observers",
        "description": "watchdog.observers",
        "isExtraImport": true,
        "detail": "watchdog.observers",
        "documentation": {}
    },
    {
        "label": "FileSystemEventHandler",
        "importPath": "watchdog.events",
        "description": "watchdog.events",
        "isExtraImport": true,
        "detail": "watchdog.events",
        "documentation": {}
    },
    {
        "label": "FileSystemEventHandler",
        "importPath": "watchdog.events",
        "description": "watchdog.events",
        "isExtraImport": true,
        "detail": "watchdog.events",
        "documentation": {}
    },
    {
        "label": "FileSystemEventHandler",
        "importPath": "watchdog.events",
        "description": "watchdog.events",
        "isExtraImport": true,
        "detail": "watchdog.events",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "GitHandler",
        "kind": 6,
        "importPath": "build.lib.git_observer.git_handler",
        "description": "build.lib.git_observer.git_handler",
        "peekOfCode": "class GitHandler:\n    \"\"\"G√®re les interactions avec Git\"\"\"\n    @staticmethod\n    def extract_commit_message(file_path):\n        \"\"\"Cherche une ligne contenant commit_name=\"message\" et retourne le message.\"\"\"\n        try:\n            with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                for line in f:\n                    if \"commit_name=\" in line:\n                        parts = line.split(\"commit_name=\", 1)",
        "detail": "build.lib.git_observer.git_handler",
        "documentation": {}
    },
    {
        "label": "get_current_directory",
        "kind": 2,
        "importPath": "build.lib.git_observer.utils",
        "description": "build.lib.git_observer.utils",
        "peekOfCode": "def get_current_directory():\n    \"\"\"R√©cup√©ration du dossier courant (compatible Linux & Windows)\"\"\"\n    return os.getcwd() if platform.system() == \"Windows\" else subprocess.run([\"pwd\"], capture_output=True, text=True).stdout.strip()",
        "detail": "build.lib.git_observer.utils",
        "documentation": {}
    },
    {
        "label": "GitAutoCommitHandler",
        "kind": 6,
        "importPath": "build.lib.git_observer.watcher.copy",
        "description": "build.lib.git_observer.watcher.copy",
        "peekOfCode": "class GitAutoCommitHandler(FileSystemEventHandler):\n    \"\"\"Classe qui √©coute les modifications et pousse les commits automatiquement.\"\"\"\n    def __init__(self):\n        super().__init__()\n        self.git_handler = GitHandler()\n    def on_modified(self, event):\n        \"\"\"D√©clench√© lorsqu'un fichier est modifi√©.\"\"\"\n        if event.is_directory or any(excluded in event.src_path for excluded in [\".git\", \"node_modules\"]) or os.path.basename(event.src_path).startswith(\".\"):\n            return  # Ignore les dossiers et fichiers cach√©s\n        file_path = event.src_path",
        "detail": "build.lib.git_observer.watcher.copy",
        "documentation": {}
    },
    {
        "label": "start_watcher",
        "kind": 2,
        "importPath": "build.lib.git_observer.watcher.copy",
        "description": "build.lib.git_observer.watcher.copy",
        "peekOfCode": "def start_watcher():\n    \"\"\"D√©marre la surveillance du dossier\"\"\"\n    watched_dir = get_current_directory()\n    print(f\"{Fore.MAGENTA}üëÄ Surveillance du dossier : {watched_dir}{Style.RESET_ALL}\")\n    event_handler = GitAutoCommitHandler()\n    observer = Observer()\n    observer.schedule(event_handler, watched_dir, recursive=True)\n    try:\n        observer.start()\n        while True:",
        "detail": "build.lib.git_observer.watcher.copy",
        "documentation": {}
    },
    {
        "label": "GitAutoCommitHandler",
        "kind": 6,
        "importPath": "build.lib.git_observer.watcher",
        "description": "build.lib.git_observer.watcher",
        "peekOfCode": "class GitAutoCommitHandler(FileSystemEventHandler):\n    \"\"\"Surveille les fichiers et d√©clenche des commits automatiques ou sur modification.\"\"\"\n    def __init__(self, mode=MODE_AUTO, commit_delay=30, default_message=\"Mise √† jour automatique\"):\n        super().__init__()\n        self.mode = mode\n        self.commit_delay = commit_delay\n        self.default_message = default_message\n        self.last_commit_time = time.time()\n    def on_any_event(self, event):\n        \"\"\"G√®re tous les √©v√©nements (cr√©ation, modification, suppression, d√©placement).\"\"\"",
        "detail": "build.lib.git_observer.watcher",
        "documentation": {}
    },
    {
        "label": "parse_arguments",
        "kind": 2,
        "importPath": "build.lib.git_observer.watcher",
        "description": "build.lib.git_observer.watcher",
        "peekOfCode": "def parse_arguments():\n    \"\"\"Analyse les arguments CLI pour configurer le comportement.\"\"\"\n    parser = argparse.ArgumentParser(description=\"Surveille un dossier et effectue des commits automatiques.\")\n    parser.add_argument(\"--mode\", type=str, choices=[MODE_AUTO, MODE_PATTERN], default=MODE_AUTO, help=\"Mode d'ex√©cution : 'auto' (par d√©faut) ou 'pattern'\")\n    parser.add_argument(\"--delay\", type=int, default=30, help=\"D√©lai en secondes pour le commit automatique (mode auto).\")\n    parser.add_argument(\"--message\", type=str, default=\"Auto update\", help=\"Message de commit par d√©faut.\")\n    return parser.parse_args()\n# if __name__ == \"__main__\":\n#     args = parse_arguments()\n#     print(f\"{Fore.GREEN}üöÄ Mode : {args.mode}, Delay : {args.delay}s, Message : {args.message}{Style.RESET_ALL}\")",
        "detail": "build.lib.git_observer.watcher",
        "documentation": {}
    },
    {
        "label": "start_watcher",
        "kind": 2,
        "importPath": "build.lib.git_observer.watcher",
        "description": "build.lib.git_observer.watcher",
        "peekOfCode": "def start_watcher():\n    \"\"\"D√©marre la surveillance du dossier\"\"\"\n    args = parse_arguments()\n    print(f\"{Fore.GREEN}üöÄ Mode : {args.mode}, Delay : {args.delay}s, Message : {args.message}{Style.RESET_ALL}\")\n    watched_dir = get_current_directory()\n    print(f\"{Fore.MAGENTA}üëÄ Surveillance du dossier : {watched_dir}{Style.RESET_ALL}\")\n    event_handler = GitAutoCommitHandler(mode=args.mode, commit_delay=args.delay, default_message=args.message)\n    # event_handler = GitAutoCommitHandler()\n    observer = Observer()\n    observer.schedule(event_handler, watched_dir, recursive=True)",
        "detail": "build.lib.git_observer.watcher",
        "documentation": {}
    },
    {
        "label": "MODE_AUTO",
        "kind": 5,
        "importPath": "build.lib.git_observer.watcher",
        "description": "build.lib.git_observer.watcher",
        "peekOfCode": "MODE_AUTO = \"auto\"\nMODE_PATTERN = \"pattern\"\n# Liste des fichiers modifi√©s\nMODIFIED_FILES = {}\nclass GitAutoCommitHandler(FileSystemEventHandler):\n    \"\"\"Surveille les fichiers et d√©clenche des commits automatiques ou sur modification.\"\"\"\n    def __init__(self, mode=MODE_AUTO, commit_delay=30, default_message=\"Mise √† jour automatique\"):\n        super().__init__()\n        self.mode = mode\n        self.commit_delay = commit_delay",
        "detail": "build.lib.git_observer.watcher",
        "documentation": {}
    },
    {
        "label": "MODE_PATTERN",
        "kind": 5,
        "importPath": "build.lib.git_observer.watcher",
        "description": "build.lib.git_observer.watcher",
        "peekOfCode": "MODE_PATTERN = \"pattern\"\n# Liste des fichiers modifi√©s\nMODIFIED_FILES = {}\nclass GitAutoCommitHandler(FileSystemEventHandler):\n    \"\"\"Surveille les fichiers et d√©clenche des commits automatiques ou sur modification.\"\"\"\n    def __init__(self, mode=MODE_AUTO, commit_delay=30, default_message=\"Mise √† jour automatique\"):\n        super().__init__()\n        self.mode = mode\n        self.commit_delay = commit_delay\n        self.default_message = default_message",
        "detail": "build.lib.git_observer.watcher",
        "documentation": {}
    },
    {
        "label": "MODIFIED_FILES",
        "kind": 5,
        "importPath": "build.lib.git_observer.watcher",
        "description": "build.lib.git_observer.watcher",
        "peekOfCode": "MODIFIED_FILES = {}\nclass GitAutoCommitHandler(FileSystemEventHandler):\n    \"\"\"Surveille les fichiers et d√©clenche des commits automatiques ou sur modification.\"\"\"\n    def __init__(self, mode=MODE_AUTO, commit_delay=30, default_message=\"Mise √† jour automatique\"):\n        super().__init__()\n        self.mode = mode\n        self.commit_delay = commit_delay\n        self.default_message = default_message\n        self.last_commit_time = time.time()\n    def on_any_event(self, event):",
        "detail": "build.lib.git_observer.watcher",
        "documentation": {}
    },
    {
        "label": "GitHandler",
        "kind": 6,
        "importPath": "git_observer.git_handler",
        "description": "git_observer.git_handler",
        "peekOfCode": "class GitHandler:\n    \"\"\"G√®re les interactions avec Git\"\"\"\n    @staticmethod\n    def extract_commit_message(file_path):\n        \"\"\"Cherche une ligne contenant commit_name=\"message\" et retourne le message.\"\"\"\n        try:\n            with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                for line in f:\n                    if \"commit_name=\" in line:\n                        parts = line.split(\"commit_name=\", 1)",
        "detail": "git_observer.git_handler",
        "documentation": {}
    },
    {
        "label": "get_current_directory",
        "kind": 2,
        "importPath": "git_observer.utils",
        "description": "git_observer.utils",
        "peekOfCode": "def get_current_directory():\n    \"\"\"R√©cup√©ration du dossier courant (compatible Linux & Windows)\"\"\"\n    return os.getcwd() if platform.system() == \"Windows\" else subprocess.run([\"pwd\"], capture_output=True, text=True).stdout.strip()",
        "detail": "git_observer.utils",
        "documentation": {}
    },
    {
        "label": "GitAutoCommitHandler",
        "kind": 6,
        "importPath": "git_observer.watcher",
        "description": "git_observer.watcher",
        "peekOfCode": "class GitAutoCommitHandler(FileSystemEventHandler):\n    \"\"\"Surveille les fichiers et d√©clenche des commits automatiques ou sur modification.\"\"\"\n    def __init__(self, mode=MODE_AUTO, commit_delay=30, default_message=\"Mise √† jour automatique\"):\n        super().__init__()\n        self.mode = mode\n        self.commit_delay = commit_delay\n        self.default_message = default_message\n        self.last_commit_time = time.time()\n    def on_any_event(self, event):\n        \"\"\"G√®re tous les √©v√©nements (cr√©ation, modification, suppression, d√©placement).\"\"\"",
        "detail": "git_observer.watcher",
        "documentation": {}
    },
    {
        "label": "parse_arguments",
        "kind": 2,
        "importPath": "git_observer.watcher",
        "description": "git_observer.watcher",
        "peekOfCode": "def parse_arguments():\n    \"\"\"Analyse les arguments CLI pour configurer le comportement.\"\"\"\n    parser = argparse.ArgumentParser(description=\"Surveille un dossier et effectue des commits automatiques.\")\n    parser.add_argument(\"--mode\", type=str, choices=[MODE_AUTO, MODE_PATTERN], default=MODE_AUTO, help=\"Mode d'ex√©cution : 'auto' (par d√©faut) ou 'pattern'\")\n    parser.add_argument(\"--delay\", type=int, default=30, help=\"D√©lai en secondes pour le commit automatique (mode auto).\")\n    parser.add_argument(\"--message\", type=str, default=\"Auto update\", help=\"Message de commit par d√©faut.\")\n    return parser.parse_args()\n# if __name__ == \"__main__\":\n#     args = parse_arguments()\n#     print(f\"{Fore.GREEN}üöÄ Mode : {args.mode}, Delay : {args.delay}s, Message : {args.message}{Style.RESET_ALL}\")",
        "detail": "git_observer.watcher",
        "documentation": {}
    },
    {
        "label": "start_watcher",
        "kind": 2,
        "importPath": "git_observer.watcher",
        "description": "git_observer.watcher",
        "peekOfCode": "def start_watcher():\n    \"\"\"D√©marre la surveillance du dossier\"\"\"\n    args = parse_arguments()\n    print(f\"{Fore.GREEN}üöÄ Mode : {args.mode}, Delay : {args.delay}s, Message : {args.message}{Style.RESET_ALL}\")\n    watched_dir = get_current_directory()\n    print(f\"{Fore.MAGENTA}üëÄ Surveillance du dossier : {watched_dir}{Style.RESET_ALL}\")\n    event_handler = GitAutoCommitHandler(mode=args.mode, commit_delay=args.delay, default_message=args.message)\n    # event_handler = GitAutoCommitHandler()\n    observer = Observer()\n    observer.schedule(event_handler, watched_dir, recursive=True)",
        "detail": "git_observer.watcher",
        "documentation": {}
    },
    {
        "label": "MODE_AUTO",
        "kind": 5,
        "importPath": "git_observer.watcher",
        "description": "git_observer.watcher",
        "peekOfCode": "MODE_AUTO = \"auto\"\nMODE_PATTERN = \"pattern\"\n# Liste des fichiers modifi√©s\nMODIFIED_FILES = {}\nclass GitAutoCommitHandler(FileSystemEventHandler):\n    \"\"\"Surveille les fichiers et d√©clenche des commits automatiques ou sur modification.\"\"\"\n    def __init__(self, mode=MODE_AUTO, commit_delay=30, default_message=\"Mise √† jour automatique\"):\n        super().__init__()\n        self.mode = mode\n        self.commit_delay = commit_delay",
        "detail": "git_observer.watcher",
        "documentation": {}
    },
    {
        "label": "MODE_PATTERN",
        "kind": 5,
        "importPath": "git_observer.watcher",
        "description": "git_observer.watcher",
        "peekOfCode": "MODE_PATTERN = \"pattern\"\n# Liste des fichiers modifi√©s\nMODIFIED_FILES = {}\nclass GitAutoCommitHandler(FileSystemEventHandler):\n    \"\"\"Surveille les fichiers et d√©clenche des commits automatiques ou sur modification.\"\"\"\n    def __init__(self, mode=MODE_AUTO, commit_delay=30, default_message=\"Mise √† jour automatique\"):\n        super().__init__()\n        self.mode = mode\n        self.commit_delay = commit_delay\n        self.default_message = default_message",
        "detail": "git_observer.watcher",
        "documentation": {}
    },
    {
        "label": "MODIFIED_FILES",
        "kind": 5,
        "importPath": "git_observer.watcher",
        "description": "git_observer.watcher",
        "peekOfCode": "MODIFIED_FILES = {}\nclass GitAutoCommitHandler(FileSystemEventHandler):\n    \"\"\"Surveille les fichiers et d√©clenche des commits automatiques ou sur modification.\"\"\"\n    def __init__(self, mode=MODE_AUTO, commit_delay=30, default_message=\"Mise √† jour automatique\"):\n        super().__init__()\n        self.mode = mode\n        self.commit_delay = commit_delay\n        self.default_message = default_message\n        self.last_commit_time = time.time()\n    def on_any_event(self, event):",
        "detail": "git_observer.watcher",
        "documentation": {}
    }
]